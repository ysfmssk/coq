Require Import Arith.
Require Import List.
Require Import Relations.
Require Import Wellfounded.
Require Import list_util.
Require Import ModEq.

Require Import combi.

Set Implicit Arguments.

Theorem Willson1: forall p, Prime p -> ModEq p (fact (p-1)) (p-1). Proof. intros. destruct (le_lt_dec p 2) as [H0|H0]. replace p with 2; simpl; auto. apply le_antisym; auto. assert (Hp:p<>0). contradict H; subst p; auto. rewrite fact_fold. remember (p-1) as t. assert (Ht: p=S t). destruct p. contradict Hp; auto. simpl in Heqt. rewrite <- minus_n_O in Heqt; subst t; auto. assert (Ht1:t<p). rewrite Ht; auto. assert (Ht2:Coprime p t). destruct (Prime_Coprime_Divide t H); auto. apply Divide_le in H1. contradict Ht1; auto. contradict H. rewrite Ht. rewrite H. auto. remember (t-2) as u. assert (Hu:t=S(S u)). subst u. destruct t. subst p; contradict H0; auto. simpl. destruct t. contradict H0; subst p; auto. simpl. rewrite <- minus_n_O; auto. rewrite Hu at 1. rewrite seqS. simpl. rewrite <- plus_n_O. rewrite fold_mult_app. simpl. rewrite mult_1_r. rewrite <- Hu. replace t with (1*t) at 2; auto. apply ModEq_mult; auto.
  destruct (Rpair_list) with (l:=seq 2 u) (R:=fun x y=>ModEq p (x*y) 1) as [l [H1 H2]]; simpl; intros; auto. intros C. apply in_seq in H1. destruct H1. absurd (x=1). contradict H1; subst x; auto. rewrite <- modN_le_eq with p Hp x. rewrite <- modN_le_eq with p Hp 1; auto. apply ModEq__modN_eq. apply ModEq_div with (1+x); auto. destruct (Prime_Coprime_Divide (1+x) H); auto. simpl in H3. apply Divide_le in H3; auto. contradict H2. simpl. rewrite <- Hu. apply le_not_lt. apply le_S_n. rewrite <- Ht; auto. rewrite mult_1_r. rewrite mult_plus_distr_r. rewrite mult_1_l. rewrite plus_comm. auto. simpl in H2. rewrite <- Hu in H2. apply lt_le_trans with t; auto.
  apply in_seq in H1. destruct H1. simpl in H2. rewrite <- Hu in H2. assert (Hx:x<p). rewrite Ht; auto. assert (Hxz:x<>0). contradict H1; subst x; auto. assert (Hc:Coprime p x). destruct (Prime_Coprime_Divide x H); auto. apply Divide_le in H3; auto. contradict Hx; auto. destruct ModInv with (n:=p) (a:=x) as [y [H3 H4]]; auto. exists (modN Hp y). split. apply ModEq_trans with (x*y); auto. split. apply in_seq. split. destruct (le_lt_dec 2 (modN Hp y)); auto. inversion l. assert (ModEq p x 1). replace x with (x*modN Hp y). apply ModEq_trans with (x*y); auto. rewrite H6. rewrite mult_1_r; auto. apply ModEq__modN_eq with p Hp x 1 in H5. rewrite modN_le_eq in H5; auto. rewrite modN_le_eq in H5; auto. contradict H1; subst x; auto. inversion H6. assert (ModEq p 0 1). apply ModEq_trans with (x*y); auto. replace 0 with (x*modN Hp y); auto. rewrite H8; auto. absurd (0=1); auto. apply ModEq__modN_eq with p Hp 0 1 in H7. rewrite modN_le_eq with p Hp 1 in H7; auto. rewrite modN_le_eq with p Hp 0 in H7; auto. inversion H8. simpl. rewrite <- Hu. assert (modN Hp y<p). auto. rewrite Ht in H5. apply le_S_n in H5. destruct (le_lt_or_eq (modN Hp y) t H5); auto. contradict H2. replace x with t; auto. cut (ModEq p t x). intros. apply ModEq__modN_eq with p Hp t x in H2. rewrite modN_le_eq in H2; auto. rewrite modN_le_eq in H2; auto.
  destruct (ModInv) with (n:=p) (a:=t) as [z [H7 H8]]; auto. contradict H0. rewrite Ht. rewrite H0. auto. apply ModEq_trans with z. apply ModEq_sym; apply H8. rewrite Ht. apply ModEq_m1_sq. apply H8. rewrite <- H6. apply ModEq_trans with (y*x); auto. rewrite mult_comm; auto. intros. rewrite <- modN_le_eq with p Hp z. apply ModEq__modN_eq; auto. apply in_seq in H5. destruct H5. apply lt_le_trans with (2+u); auto. simpl. rewrite <- Hu; auto. 
 rewrite mult_comm; auto. rewrite fold_right_Perm with (m:=map fst l++map snd l); auto. clear -H2. induction l as [|[a b] l]; simpl; auto. rewrite fold_right_Perm with (m:=b::map fst l++map snd l); auto. simpl. rewrite mult_assoc. inversion H2.  replace 1 with (1*1); auto. Qed.
Theorem Willson2: forall n, 2<=n -> ModEq n (fact (n-1)) (n-1) -> Prime n. Proof. intros. destruct (primeDivide n) as [[p H1 H2]|H1]; [|contradict H; auto]. assert (p<=n). apply Divide_le; auto. contradict H; subst n; auto. destruct (le_lt_or_eq p n H3). absurd (Divide p (fact (n-1)+1)). intros C. apply Divide_minus in C. apply Divide_le in C; auto. contradict C; auto. apply fact_Divide. apply le_S_n. destruct n; simpl; auto. rewrite <- minus_n_O; auto. contradict H1; subst p; auto. apply Divide_trans with n; auto. apply ModEq_trans with n; auto. replace n with (1*n+0) at 2; auto. simpl. repeat rewrite <- plus_n_O. auto. replace n with (n-1+1) at 2; auto. destruct n; simpl; auto. rewrite <- minus_n_O. rewrite plus_comm; auto. subst p; auto. Qed.

Inductive ModOrder (n:nat): relation nat := ModOrder_intro: forall a k, Coprime n a -> MinP (fun x=>x<>0 /\ ModEq n (pow a x) 1) k -> ModOrder n a k.
Hint Constructors ModOrder.

Definition modOrder: forall n a, Coprime n a -> {k|ModOrder n a k}. intros. destruct (nat_eq_dec n 0) as [Hn|Hn]. subst n. assert (a=1). apply GCD_unique with 0 a; auto. destruct (nat_eq_dec a 0); auto. subst a; contradict H; unfold Coprime; auto. subst a. exists 1. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H0. destruct m; auto.
  destruct (minP) with (P:=fun x=>x<>0/\ModEq n (pow a x) 1) (n:=S(totient n)).  intros. destruct (ModEq_dec n (pow a x) 1); [|right]. destruct (nat_eq_dec x 0); [right|left]; auto. contradict e; destruct e; auto. contradict n0; destruct n0; auto. destruct s as [m H1]. exists m. apply ModOrder_intro; auto. unfold totient in n0. destruct (totient_sig n) as [t Ht]. absurd (t<>0/\ModEq n (pow a t) 1); auto. split. apply Totient_nz with n; auto. apply Euler; auto. Defined.
Theorem ModOrder_nz: forall n a k, ModOrder n a k -> k<>0. Proof. intros. inversion H. inversion H1. destruct H4; auto. Qed.
Theorem ModOrder_unique: forall n a k j, ModOrder n a k -> ModOrder n a j -> k=j. Proof. intros. inversion H. inversion H0. inversion H2. inversion H6. apply le_antisym; auto. Qed.
Theorem ModOrder_Divide: forall n a k d, ModOrder n a k -> Divide k d <-> ModEq n (pow a d) 1. Proof. intros. split; intros. destruct (Divide_multN H0). subst d. rewrite pow_mult. clear H0. inversion H. inversion H1. destruct H4. clear -H7. induction x; simpl; auto. replace 1 with (1*1); auto. inversion H. subst a0 k0. inversion H2. subst n0. destruct H3. destruct (divmod k d) as [[q [r [H6 H7] _]]|];[|contradiction]. subst d. destruct (nat_eq_dec r 0). subst r. rewrite <- plus_n_O. auto. rewrite pow_plus in H0. rewrite pow_mult in H0.
  absurd (k<=r); auto. apply H4. split; auto. clear -H0 H1 H5. induction q. simpl in H0. rewrite <- plus_n_O in H0; auto. apply IHq. simpl in H0. apply ModEq_div with (pow a k). clear -H1. induction k; simpl; auto. rewrite mult_assoc. rewrite mult_1_r. apply ModEq_trans with 1; auto. Qed.
Theorem ModOrder_Totient: forall n a k t, ModOrder n a k -> Totient n t -> Divide k t. Proof. intros. destruct ModOrder_Divide with n a k t; auto. apply H2. apply Euler; auto. inversion H; auto. Qed.
Theorem ModOrder_pow: forall n a k, ModOrder n a k -> forall x y, ModEq n (pow a x) (pow a y) <-> ModEq k x y. Proof. intros n a k H. cut (forall x y, x<=y->ModEq n (pow a x) (pow a y) <-> ModEq k x y). intros. destruct (le_lt_dec x y); auto. split; intros. apply ModEq_sym. apply H0; auto. apply ModEq_sym. apply H0; auto. intros. replace y with (x+(y-x)); [|rewrite <- le_plus_minus]; auto. split; intros. cut (ModEq n (pow a (y-x)) 1). intros. destruct ModOrder_Divide with n a k (y-x); auto. replace x with (x+0) at 1; auto. apply ModEq_plus; auto. apply H4; auto.
  inversion H. revert H1. clear -H2. generalize (y-x). induction x; simpl; intros; auto. apply IHx. apply ModEq_div with a; auto. rewrite pow_plus. replace (pow a x) with (pow a x*1) at 1; [|apply mult_1_r]. apply ModEq_mult; auto. destruct (ModOrder_Divide) with n a k (y-x); auto. apply ModEq_sym. apply H2. apply ModEq_minus with x. rewrite <- plus_n_O; auto. Qed.
Theorem ModOrder_NoDup: forall n a k (Hn:n<>0), ModOrder n a k -> NoDup (map (fun x=>modN Hn (pow a x)) (seq 0 k)). Proof. intros. apply NoDup_map; auto. intros. apply modN_eq__ModEq in H2. destruct ModOrder_pow with n a k x y; auto. apply H3 in H2. destruct (ModEq_multN H2) as [[q H5]|[q H5]]. subst y. destruct q; auto. apply in_seq in H1. destruct H1. contradict H5; auto. simpl. rewrite <- plus_assoc. auto. subst x. destruct q; auto. apply in_seq in H0. destruct H0. contradict H5. simpl. rewrite <- plus_assoc; auto. Qed.
Theorem ModOrder_ModEq: forall n a k b, ModOrder n a k -> ModEq n a b -> ModOrder n b k. Proof. intros. inversion H. subst a0 k0. apply ModOrder_intro. apply GCD_ModEq with a; auto. inversion H2. destruct H3. subst n0. apply MinP_intro; auto. split; auto. apply ModEq_trans with (pow a k); auto. intros. destruct H5. apply H4; split; auto. apply ModEq_trans with (pow b m); auto. Qed.
Theorem ModOrder_PnumN: forall n a k, n<>0->ModOrder n a k-> PnumN (fun x=>exists k, ModEq n (pow a k) x) n k. Proof. intros. assert (Hk:k<>0). eapply ModOrder_nz; eauto. assert (P_dec: forall x, {exists m, ModEq n (pow a m) x}+{~exists m, ModEq n (pow a m) x}).  intros. destruct minP with (n:=k) (P:=fun y=>ModEq n (pow a y) x) as [[m H1]|H1]; [|left|right]. intros. destruct (ModEq_dec n (pow a x0) x); [left|right]; auto. exists m. inversion H1; auto. intros C. destruct C. absurd (ModEq n (pow a  (modN Hk x0)) x ); auto. apply ModEq_trans with (pow a x0); auto. destruct ModOrder_pow with n a k (modN Hk x0) x0; auto. replace k with (length (filter (dec2b P_dec) (seq 0 n))). apply PnumN_filter.
  replace k with (length (map (fun x=>modN H (pow a x)) (seq 0 k))). apply Perm_length. apply NoDup_incl_each_Perm; auto. apply NoDup_map; auto. intros. apply modN_eq__ModEq in H3. apply ModOrder_pow with n a k  x y in H3; auto. replace x with (modN Hk x). replace y with (modN Hk y); auto. apply modN_le_eq. apply in_seq in H2. destruct H2; auto. apply in_seq in H1. destruct H1; auto. intros x Hx. apply filter_In in Hx. destruct Hx. apply dec2b_true in H2.  destruct H2 as [m H3]. apply in_map_iff. exists (modN Hk m). split. replace x with (modN H x). apply ModEq__modN_eq. apply ModEq_trans with (pow a m); auto. destruct ModOrder_pow with n a k (modN Hk m) m; auto. apply modN_le_eq. apply in_seq in H1. destruct H1; auto. apply in_seq. split; auto.
  intros x Hx. apply in_map_iff in Hx. destruct Hx as [y [H1 H2]]. subst x. apply filter_In. split. apply in_seq. split; auto. apply dec2b_true. exists y; auto. rewrite map_length. apply seq_length; auto. Qed.
Hint Resolve ModOrder_unique ModOrder_Divide ModOrder_Totient ModOrder_pow ModOrder_ModEq ModOrder_PnumN.

Inductive ModRoot: relation nat:= ModRoot_intro: forall n g t, Totient n t -> ModOrder n g t -> ModRoot n g.
Hint Constructors ModRoot.

Theorem ModRoot_ModEq: forall n a b, ModRoot n a -> ModEq n a b -> ModRoot n b. Proof. intros. inversion H. apply ModRoot_intro with t; auto. apply ModOrder_ModEq with a; auto. Qed.
Theorem Prime_ModRoot_map: forall p g (Hp:Prime p), ModRoot p g -> Perm (seq 1 (p-1)) (map (fun x=>modN (Prime_nz Hp) (pow g x)) (seq 1 (p-1))). Proof. intros. apply Perm_sym. apply NoDup_incl_Perm. intros y Hy. apply in_map_iff in Hy. destruct Hy as [z [H1 H2]]. subst y. apply in_seq. split. cut (modN (Prime_nz Hp) (pow g z)<>0); intros. destruct (modN (Prime_nz Hp) (pow g z)); auto. intros C. replace 0 with (modN (Prime_nz Hp) 0) in C; auto. apply modN_eq__ModEq in C. inversion H. inversion H1. clear -H5 C Hp. induction z. simpl in C. apply ModEq_le_eq in C; auto. inversion C. simpl in C. apply ModEq_sym in C. apply Euclid_Prime in C; auto. destruct C; auto. absurd (p<=1); auto. inversion H5; auto. rewrite <- le_plus_minus; auto. apply NoDup_map; auto. intros. apply modN_eq__ModEq in H2. cut (forall a b, a<b -> In a (seq 1 (p-1)) -> In b (seq 1 (p-1)) -> ~ModEq p (pow g a) (pow g b)); intros. destruct (le_lt_dec x y). destruct (le_lt_or_eq x y l); auto. contradict H2; auto. apply ModEq_sym in H2; contradict H2; auto. intros C. rewrite <- mult_1_r with (n:=pow g a) in C. rewrite le_plus_minus with a b in C; auto. rewrite pow_plus in C.
  apply ModEq_div in C. inversion H. inversion H7. inversion H11. subst n g0 a0 k n0. assert (t<=b-a). apply H15; split; auto. contradict H3. apply Nat.sub_0_le in H3; auto. replace t with (p-1) in H8. apply in_seq in H4. destruct H4. apply in_seq in H5. destruct H5. contradict H8. apply lt_not_le. apply lt_le_trans with b. destruct b. inversion H5. destruct a. inversion H4. simpl. apply le_n_S. apply le_minus. auto. apply Totient_unique  with p; auto. inversion H. inversion H7. clear -Hp H10. induction a; auto. rewrite map_length; auto. Qed.
Theorem Prime_ModRoot_root: forall p g, Prime p -> ModRoot p g -> forall n, {k|ModEq p (pow g k) n & forall k', ModEq p (pow g k') n -> ModEq (p-1) k k'}+{Divide p n}. intros. destruct (Divide_dec p n) as [Hd|Hd]; [right; auto|left]. destruct findN with (P:=fun x=>x<>0/\ModEq p (pow g x) n) (n:=p) as [[y H1]|H1]. intros. simpl. destruct (nat_eq_dec x 0); [right|]; auto. contradict e. destruct e; auto. destruct (ModEq_dec p (pow g x) n); [left|right]; auto. intros C; destruct C; contradiction. destruct H1. exists y; auto. intros. apply ModOrder_pow with (k:=p-1) (x:=y) (y:=k') (n:=p) (a:=g); auto. inversion H0. replace (p-1) with t; auto. eapply Totient_unique with p; auto. apply ModEq_trans with n; auto. absurd (In (modN (Prime_nz H) n) (seq 1 (p-1))). intros C. apply Perm_In with (m:=map (fun x=>modN (Prime_nz H) (pow g x)) (seq 1 (p-1))) in C. apply in_map_iff in C. destruct C as [x [H2 H3]]. apply in_seq in H3. destruct H3. absurd (x<>0/\ModEq p (pow g x) n). apply H1. rewrite <- le_plus_minus in H4; auto. split. destruct x; auto. inversion H3. apply modN_eq__ModEq in H2; auto. apply Prime_ModRoot_map; auto. apply in_seq. split. destruct (le_lt_dec 1 (modN (Prime_nz H) n)); auto. contradict Hd. inversion l. apply modN_eq__ModEq with (Prime_nz H). rewrite modN_le_eq; auto. inversion H3. rewrite <- le_plus_minus; auto. Defined.
Theorem ModOrder_mult: forall p a b o s, Prime p -> ModOrder p a o -> ModOrder p b s -> Coprime o s -> ModOrder p (a*b) (o*s). Proof. intros. inversion H0. inversion H4. inversion H1. inversion H11. destruct H7. destruct H14. subst a0 k n a1 k0 n0. clear H0 H1 H4 H11. apply ModOrder_intro; auto. apply MinP_intro. split. intros C. apply mult_is_O in C. destruct C; contradiction. replace 1 with (1*1); auto. rewrite pow_mult2. apply ModEq_mult. rewrite mult_comm. rewrite pow_mult. clear -H17. induction s; simpl; auto. replace 1 with (1*1); auto. rewrite pow_mult. clear -H18. induction o; simpl; auto. replace 1 with (1*1); auto. intros. destruct H0.
  cut (Divide o m); intros. cut (Divide s m); intros. destruct (Divide_multN H4) as [q H6]. subst m. rewrite mult_comm in H5. apply Euclid in H5; auto. destruct (Divide_multN H5) as [r H6]. subst q. rewrite mult_comm. rewrite <- mult_assoc. destruct r; simpl; auto. apply Euclid with o; auto. apply ModOrder_Divide with (n:=p) (a:=b) (k:=s) (d:=o*m); auto. apply ModEq_div with (pow a (o*m)); auto. rewrite <- pow_mult2. rewrite mult_1_r. replace (o*m) with (m*o) at 2; auto. repeat rewrite pow_mult. apply ModEq_trans with 1. clear -H1. induction o; simpl; auto. replace 1 with (1*1); auto. clear -H17. induction m; simpl; auto. replace 1 with (1*1); auto. apply Euclid with s; auto. apply ModOrder_Divide with (n:=p) (a:=a) (k:=o) (d:=s*m); auto. apply ModEq_div with (pow b (s*m)); auto. rewrite <- pow_mult2. rewrite mult_1_r. rewrite mult_comm. replace (s*m) with (m*s) at 2; auto. repeat rewrite pow_mult. apply ModEq_trans with 1. clear -H1. induction s; simpl; auto. replace 1 with (1*1); auto. clear -H18. induction m; simpl; auto. replace 1 with (1*1); auto. Qed.
Theorem ModOrder_fold: forall p l, Prime p -> (forall q, In q l->ModOrder p (fst q) (snd q)) -> Forall (Coprime p) (map fst l) -> ForallR Coprime (map snd l) -> ModOrder p (fold_right mult 1 (map fst l)) (fold_right mult 1 (map snd l)). Proof. induction l as [|[a o] l]; simpl; intros; auto. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H3. destruct m; auto. inversion H1. inversion H2. subst x x0 l0 l1. apply ModOrder_mult; auto. apply (H0 (a,o)); auto. clear -H10. revert H10. generalize (map snd l) as m. induction m; simpl; intros; auto. Qed.
Theorem ModOrder_mult2: forall n m a o s l, Coprime n m -> ModOrder n a o -> ModOrder m a s -> LCM l o s -> ModOrder (n*m) a l. Proof. intros. apply ModOrder_intro. apply Coprime_sym; apply Coprime_mult. inversion H0; auto. inversion H1; auto. apply MinP_intro. split. inversion H2. destruct H3; auto. apply ModEq_Coprime_mult; auto. apply ModOrder_Divide with (d:=l) in H0. apply H0. inversion H2. destruct H3; destruct H6; auto. apply ModOrder_Divide with (d:=l) in H1.  apply H1. inversion H2; destruct H3; destruct H6; auto. intros x Hx. destruct Hx. inversion H2. apply H6. split; auto. split.  rewrite mult_comm in H4. apply ModEq_mult_rev in H4; auto. apply ModOrder_Divide with (d:=x) in H0. apply H0; auto. apply ModOrder_Divide with (d:=x) in H1. apply H1. apply ModEq_mult_rev with n; auto. Qed.
Theorem pow_m1_factorize: forall x n, x<>0 -> pow x n - 1 = (x-1)*(fold_right (fun k b=>pow x k+b) 0 (seq 0 n)). Proof. intros. assert (1<=x). destruct x; auto. induction n. simpl; auto. rewrite seqS. simpl. rewrite fold_right_app. simpl. rewrite <- plus_n_O. replace (fold_right (fun k b=>pow x k+b) (pow x n) (seq 0 n)) with (pow x n+fold_right (fun k b=>pow x k+b) 0 (seq 0 n)). rewrite mult_plus_distr_l. rewrite <- IHn. replace x with (x-1+1) at 1. rewrite mult_plus_distr_r. rewrite mult_1_l. rewrite Nat.add_sub_assoc; auto. rewrite plus_comm. rewrite <- le_plus_minus; auto. generalize (seq 0 n). generalize (pow x n). induction l; simpl; auto. rewrite plus_comm. rewrite <- plus_assoc. f_equal. rewrite plus_comm; auto. Qed.

Inductive PolyCoeff : list nat -> nat -> nat -> Prop:= PolyCoeff_intro: forall l o t, length l=o -> PolyCoeff (t::l) o t.
Hint Constructors PolyCoeff.
Fixpoint polyEval (l:list nat) (n:nat) := match l with nil => 0 |c::l' => c*pow n (length l')+polyEval l' n end.
Definition mod_minus: forall n (nz:n<>0) x, {y|Divide n (x+y) & y<n}. intros. destruct (nat_eq_dec (modN nz x) 0). exists 0; auto. apply Divide_plus; auto. apply modN_eq__ModEq with nz; auto. rewrite e. rewrite modN_le_eq; auto. exists (n-modN nz x). apply ModEq_trans with (modN nz x+(n- modN nz x)); auto. rewrite <- le_plus_minus; auto. replace n with (1*n) at 2; auto. apply multN_Divide. destruct n. absurd (0=0); auto. destruct (modN nz x). absurd (0=0); auto. simpl. apply le_n_S. apply le_minus. Defined.
Definition polyDiv: forall n (nz:n<>0) f o t a b, PolyCoeff f (S o) t -> Divide n (a+b) -> {g|PolyCoeff g o t & forall x, ModEq n (polyEval f x) ((x+a)*polyEval g x+polyEval f b)}. intros n Hn f o. revert f. induction o; intros. exists (t::nil); auto. intros. simpl. rewrite mult_1_r. rewrite <- plus_n_O. inversion H. subst f o t0. destruct l as [|c l]. inversion H1. destruct l. simpl. repeat rewrite mult_1_r. repeat rewrite <- plus_n_O. rewrite plus_assoc. apply ModEq_plus; auto. replace ((x+a)*t) with (t*(x+a)); auto. rewrite <- mult_plus_distr_l. apply ModEq_mult; auto. replace x with (x+0) at 1; auto. rewrite <- plus_assoc; auto. inversion H1.
  destruct f. exfalso; inversion H. destruct f as [|c f]. exfalso; inversion H; inversion H5. assert (n0=t). inversion H; auto. subst n0. destruct (mod_minus Hn (a*t)) as [d H1 H2]; auto. destruct (IHo (c+d::f) (c+d) a b) as [g H3 H4]; auto. inversion H; auto. exists (t::g). inversion H3. apply PolyCoeff_intro; simpl; auto. intros. assert (length f=S o). inversion H. inversion H9; auto. assert (length g=S o). inversion H3. rewrite <- H6; auto. assert (forall x, polyEval (t::c::f) x = t*pow x (o+2)+c*pow x (o+1)+polyEval f x). intros y. simpl. repeat rewrite plus_assoc. f_equal. f_equal. f_equal. rewrite H5; auto. rewrite plus_comm; auto. f_equal. f_equal. rewrite H5; rewrite plus_comm; auto. assert (forall x, polyEval (t::g) x = t*pow x (o+1)+polyEval g x). intros y. simpl. f_equal. f_equal. f_equal. rewrite plus_comm; auto. rewrite H8. rewrite mult_plus_distr_l. rewrite mult_plus_distr_r. rewrite H7. repeat rewrite <- plus_assoc. apply ModEq_plus. apply ModEq_sym. rewrite mult_comm. rewrite <- mult_assoc. apply ModEq_mult; auto. replace (o+2) with (S(o+1)). simpl. rewrite mult_comm; auto. rewrite plus_n_Sm; auto.
  apply ModEq_minus with (d*pow x (o+1)). rewrite plus_assoc. rewrite <- mult_plus_distr_r. rewrite plus_assoc. rewrite mult_assoc. rewrite <- mult_plus_distr_r. replace ((d+c)*pow x (o+1)+polyEval f x) with (0+polyEval (c+d::f) x). apply ModEq_plus. rewrite mult_comm. apply Divide_trans with (d+a*t); auto. rewrite plus_comm; auto. apply ModEq_trans with ((x+a)*polyEval g x+polyEval (c+d::f) b); auto. apply ModEq_plus; auto. simpl. repeat rewrite plus_assoc. apply ModEq_plus; auto. rewrite plus_comm. rewrite mult_plus_distr_r. apply ModEq_plus; auto. rewrite mult_assoc. apply ModEq_mult; auto. rewrite mult_comm. apply ModEq_minus with (a*t). apply ModEq_trans with 0; auto. rewrite <- mult_plus_distr_r. rewrite mult_comm. apply Divide_trans with (a+b); auto. simpl. f_equal. f_equal; auto. f_equal. rewrite plus_comm; auto. Qed.
Theorem polySolutionNum: forall p f o t c, Prime p -> PolyCoeff f o t -> ~Divide p t -> PnumN (fun x=>Divide p (polyEval f x)) p c -> c<=o. Proof. intros p f o t c Hp. revert f t c. assert (Hn:p<>0). contradict Hp; subst p; auto. induction o; intros. inversion H. destruct l. subst o t0 f. simpl in H1. replace c with 0; auto. eapply PnumN_unique; [|eapply H1]. rewrite mult_1_r. rewrite <- plus_n_O. auto. inversion H2. destruct (nat_eq_dec c 0) as [Hc|Hc]. subst c; auto. destruct (PnumN_ex H1). destruct (H2 Hc) as [d [H4 H5]]. destruct (mod_minus Hn d) as [e H6 H7]. destruct (polyDiv Hn e d H) as [g H8 H9]; auto. rewrite plus_comm; auto. apply PnumN_equiv with (Q:=fun x=>Divide p (x+e) \/ Divide p (polyEval g x)) in H1. assert (PnumN (fun x=>Divide p (x+e)) p 1). apply PnumN_one with d; auto. intros. rewrite <- modN_le_eq with p Hn y; auto. rewrite <- modN_le_eq with p Hn d; auto. apply ModEq__modN_eq. apply ModEq_minus with e; auto. rewrite plus_comm. apply ModEq_trans with 0; auto. rewrite plus_comm; auto. destruct (pnumN) with (P:=fun x=>Divide p (polyEval g x)) (n:=p) as [c' H11]. intros; apply Divide_dec. assert (c<=1+c'). eapply PnumN_or. eapply H10. eapply H11. auto. apply le_trans with (1+c'); auto. simpl. apply le_n_S. apply IHo with g t; auto. intros. split; intros. apply Euclid_Prime; auto. apply Divide_minus with (polyEval f d); auto. rewrite plus_comm. apply ModEq_trans with (polyEval f x); auto. apply ModEq_trans with ((x+e)*polyEval g x+polyEval f d); auto. apply Divide_plus; auto. destruct H11. rewrite mult_comm; apply Divide_trans with (x+e); auto. apply Divide_trans with (polyEval g x); auto. Qed.
Lemma repeat0_head: forall f x n, polyEval (repeat 0 n++f) x = polyEval f x. Proof. induction n; simpl; auto. Qed.
Lemma fold_app_length: forall {X:Type} l ll, length (fold_right (app (A:=X)) l ll) = fold_right plus (length l) (map (length (A:=X)) ll). Proof. induction ll; simpl; auto. rewrite app_length; f_equal; auto. Qed.
Theorem polyRootNum: forall p d, Prime p -> Divide d (p-1) -> PnumN (fun x=>ModEq p (pow x d) 1) p d. Proof. intros. assert (Hp:p-1<>0). contradict H. destruct p; auto. destruct p; auto. inversion H. destruct (Divide_multN H0) as [e H1]. assert (Hd:d<>0). contradict Hp. subst d. rewrite H1; auto. assert (He:e<>0). contradict Hp. subst e. rewrite H1; auto. assert (PnumN (fun x=>ModEq p (pow x (e*d)) 1) p (e*d)). rewrite <- H1. cut (forall x, 1<=x->x<=p->PnumN (fun x=>ModEq p (pow x (p-1)) 1) x (x-1)). intros. apply H2; auto. intros x Hx. induction Hx; intros. simpl. apply PnumN_NP; auto. rewrite pow0n; auto. intros C. apply Divide_le in C; auto. contradict C; auto. rewrite <- minus_Sn_m; auto. apply PnumN_P; auto. apply Fermat; auto. contradict H2. apply Divide_le in H2; auto. contradict Hx; subst m; auto. destruct (pnumN) with (P:=fun x=>ModEq p (pow x d) 1) (n:=p) as [c H3]. intros. apply ModEq_dec. replace d with c at 1; auto. apply le_antisym.
  assert (H4:PolyCoeff (1::repeat 0 (d-1)++p-1::nil) d 1). apply PolyCoeff_intro. rewrite app_length. rewrite repeat_length. simpl. rewrite plus_comm. rewrite <- le_plus_minus; auto. apply (polySolutionNum H H4). intros C. apply Divide_le in C; auto. contradict C; auto. eapply PnumN_equiv; [|eapply H3]. simpl; intros. rewrite app_length. rewrite repeat_length. rewrite <- plus_assoc. simpl. replace (d-1+1) with d. rewrite repeat0_head. simpl. rewrite mult_1_r. rewrite <- plus_n_O. split; intros. apply ModEq_trans with (1+(p-1)); auto. rewrite <- le_plus_minus; auto. apply Divide_refl. apply ModEq_minus with (p-1). rewrite plus_comm. apply ModEq_trans with 0; auto. rewrite plus_comm. rewrite <- le_plus_minus; auto. apply Divide_refl. rewrite plus_comm. apply le_plus_minus; auto.
  rewrite <- mult_1_l at 1. apply plus_le_reg_l with ((e-1)*d). rewrite <- mult_plus_distr_r. rewrite plus_comm. rewrite <- le_plus_minus; auto. destruct pnumN with (P:=fun x=>Divide p (polyEval (fold_right (app (A:=nat)) (1::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x)) (n:=p) as [f H4]. intros. apply Divide_dec. assert (f<=(e-1)*d). assert (PolyCoeff (fold_right (app (A:=nat)) (1::nil) (repeat (1::repeat 0 (d-1)) (e-1))) ((e-1)*d) 1). generalize (e-1). induction n; simpl; auto. apply PolyCoeff_intro; auto. rewrite app_length. rewrite repeat_length. inversion IHn. rewrite <- H6. simpl. rewrite <- plus_n_Sm. rewrite <- plus_Sn_m. f_equal. destruct d. contradict Hd; auto. simpl. rewrite <- minus_n_O; auto. apply (polySolutionNum H H5); auto. intros C. apply Divide_le in C; auto. contradict C; auto. apply le_trans with (f+c); [|apply plus_le_compat_r]; auto. eapply PnumN_or. eapply H4. eapply H3. simpl. eapply PnumN_equiv; [|eapply H2]. intros; simpl. clear H2 H3 H4 H5 c f. assert (polyEval (fold_right (app (A:=nat)) (1::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x = polyEval (fold_right (app (A:=nat)) (0::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x+1). generalize (e-1). induction n; simpl; auto. repeat rewrite <- plus_assoc. f_equal. f_equal. repeat rewrite app_length. f_equal. repeat rewrite fold_app_length; auto. simpl. repeat rewrite repeat0_head; auto. assert (polyEval (fold_right (app (A:=nat)) (1::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x * pow x d = polyEval (fold_right (app (A:=nat)) (0::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x + pow x (e*d)). replace (e*d) with (S(e-1)*d).
  generalize (e-1). induction n; simpl; repeat rewrite <- plus_n_O; auto. rewrite mult_plus_distr_r. repeat rewrite repeat0_head; repeat rewrite app_length; repeat rewrite repeat_length; repeat rewrite fold_app_length. rewrite <- pow_plus. rewrite plus_comm. f_equal. rewrite IHn. rewrite plus_comm. f_equal. f_equal. simpl. rewrite map_repeat. simpl. rewrite repeat_length. rewrite minus_Sn_m; auto. simpl. rewrite <- minus_n_O. clear -Hd. induction n; simpl; auto. rewrite <- plus_n_O. rewrite plus_comm. apply le_plus_minus; auto. rewrite IHn. repeat rewrite plus_assoc. f_equal; auto. f_equal. rewrite map_repeat. simpl. rewrite repeat_length. rewrite minus_Sn_m; auto. simpl. rewrite <- minus_n_O. rewrite plus_comm. f_equal. clear -Hd. induction n; simpl. rewrite plus_comm. rewrite <- le_plus_minus; auto. rewrite <- IHn. repeat rewrite plus_assoc. f_equal; auto. f_equal. rewrite minus_Sn_m; auto. simpl. rewrite <- minus_n_O; auto. split; intros. destruct (Prime_Coprime_Divide (polyEval (fold_right (app (A:=nat)) (1::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x)  H); auto; right. eapply ModEq_div. eapply H5. rewrite H3. rewrite mult_1_r. rewrite H2; auto. apply ModEq_minus with (polyEval (fold_right (app (A:=nat)) (0::nil) (repeat (1::repeat 0 (d-1)) (e-1))) x). rewrite <- H3. rewrite <- H2. destruct H4. apply ModEq_trans with 0; auto. rewrite mult_comm. apply ModEq_sym. eapply Divide_trans. eapply H4. auto. rewrite <- mult_1_r. auto. Qed.

Theorem Prime_ModRoot: forall p, Prime p -> exists a, ModRoot p a. Proof. intros. assert (2<=p). auto. assert (Hp:p-1<>0). contradict H0. apply le_not_lt. destruct p; auto. destruct p; auto. inversion H0. apply le_lt_or_eq in H0. destruct H0; [|subst p; exists 1]. destruct (fundamental2 (p-1)) as [[pl [H1 [H2 [H3 H4]]]]|H1]; [|contradiction]. cut (exists l, map snd l = map (fun p=>pow (fst p) (snd p)) pl /\forall q, In q l->ModOrder p (fst q) (snd q)). intros. destruct H5 as [l [H5 H6]]. exists (fold_right mult 1 (map fst l)). apply ModRoot_intro with (p-1); auto. replace (p-1) with (fold_right mult 1 (map snd l)). apply ModOrder_fold; auto. apply Forall_forall. intros q Hq. apply in_map_iff in Hq. destruct Hq as [[r s] [H7 H8]]. simpl in H7. subst r. apply H6 in H8. simpl in H8. inversion H8; auto. rewrite H5. clear -H2 H3 H4. induction pl as [|[p c] pl]; simpl; auto. inversion H2. inversion H3. inversion H4. subst x x0 x1 l l0 l1. apply ForallR_cons; auto. intros y Hy.  apply in_map_iff in Hy. destruct Hy as [[q d] [H10 H11]]. subst y. simpl. destruct (Prime_pow_Coprime_Divide (pow q d) c H1); auto. absurd (In p (map fst pl)); auto. replace p with q. apply in_map_iff. exists (q,d); auto. symmetry. apply repeat_spec with d. apply Prime_mult_In; auto. cut (Prime q). intros. clear -H0. induction d; simpl; auto. apply Forall_forall with (P:=Prime) (l:=map fst pl); auto. apply in_map_iff. exists (q,d); auto. replace (fold_right mult 1 (repeat q d)) with (pow q d); auto. clear -d. induction d; simpl; auto. rewrite H1. rewrite H5. clear -pl. induction pl; simpl; auto.
  cut (forall q, In q pl -> exists a, ModOrder p a (pow (fst q) (snd q))). intros. clear -H5. induction pl. exists nil; simpl; auto. split; auto. intros. destruct H. destruct (H5 a) as [o H6]; auto. destruct IHpl as [l [H7 H8]]. intros. apply H5; auto. exists ((o, pow (fst a) (snd a))::l). simpl. split. f_equal; auto. intros. destruct H; auto. subst q. simpl. auto. 
  intros. destruct q as [q c]. simpl. assert (c<>0). apply Forall_forall with (l:=map snd pl) (P:=fun x=>x<>0); auto. apply in_map_iff. exists (q,c); auto. assert (Prime q). apply Forall_forall with (l:=map fst pl) (P:=Prime); auto. apply in_map_iff. exists (q,c); auto. assert (Divide (pow q c) (p-1)). rewrite H1. clear -H5. induction pl. destruct H5. destruct H5. simpl. subst a. simpl; rewrite mult_comm; auto. simpl. eapply Divide_trans. eapply IHpl; auto. auto. assert (Divide (pow q (c-1)) (p-1)). apply Divide_trans with (pow q c); auto. apply pow_Prime_Divide; auto. exists (c-1); split; auto. apply le_minus. assert (PnumN (fun x=>ModEq p (pow x (pow q c)) 1) p (pow q c)). apply polyRootNum; auto. assert (PnumN (fun x=>ModEq p (pow x (pow q (c-1))) 1) p (pow q (c-1))). apply polyRootNum; auto. destruct (PnumN_lt) with (P:=fun x=>ModEq p (pow x (pow q (c-1))) 1) (Q:=fun x=>ModEq p (pow x (pow q c)) 1) (n:=p) (a:=pow q (c-1)) (b:=pow q c) as [x [Ha [Hb Hc]]]; auto. destruct c. contradict H6; auto. simpl. rewrite <- minus_n_O. remember (pow q c) as a. destruct a. symmetry in Heqa. contradict Heqa. apply pow_nz. contradict H7; subst q; auto. destruct q. contradict H7; auto. destruct q. contradict H7; auto. simpl. rewrite <- plus_n_Sm. auto.
  exists x. assert (Coprime p x). destruct (Prime_Coprime_Divide  x H); auto. contradict Ha. apply Divide_le in H12; auto. intros C; subst x. replace (pow 0 (pow q c)) with 0 in Hc. absurd (0=1); auto. apply ModEq_le_eq with p; auto. rewrite pow0n; auto. destruct (modOrder H12) as [k H13]. destruct (ModOrder_Divide (pow q c) H13). destruct (ModOrder_Divide (pow q (c-1)) H13). apply H15 in Hc. apply pow_Prime_Divide in Hc; auto. destruct Hc as [m [H18 H19]]. subst k. apply le_lt_or_eq in H19. destruct H19; [|subst m]; auto. contradict Hb. apply H16. apply pow_Prime_Divide; auto. exists m; split; auto. destruct c. contradict H6; auto. simpl. rewrite <- minus_n_O; auto. apply ModRoot_intro with (2-1); auto. simpl. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct m; auto. destruct H0. contradict H0; auto. Qed.
Definition modRoot: forall p, Prime p -> {a|ModRoot p a}. intros. destruct minP with (P:=fun x=>Coprime p x/\ModOrder p x (p-1)) (n:=p) as [[a H1]|H1]. intros. destruct (Coprime_dec p x); [|right]. destruct (modOrder c) as [k H1]. destruct (nat_eq_dec k (p-1)); [subst k;left|right]; auto. contradict n. destruct n. apply ModOrder_unique with p x; auto. contradict n; destruct n; auto. exists a. inversion H1. destruct H0. apply ModRoot_intro with (p-1); auto. exfalso. destruct (Prime_ModRoot H) as [a Ha]. assert (Hp:p<>0). contradict H; subst p; auto. absurd (Coprime p (modN Hp a)/\ModOrder p (modN Hp a) (p-1)); auto. apply ModRoot_ModEq with (b:=modN Hp a) in Ha; auto. inversion Ha. inversion H2. split; auto. replace (p-1) with t; auto. apply Totient_unique with p; auto. Defined.

Theorem Prime_pow_ModRoot: forall p e, Prime p -> 3<=p -> exists a, ModRoot (pow p e) a. Proof. intros. assert (Hp:p-1<>0). destruct p. contradict H; auto. destruct p. contradict H; auto. discriminate. assert (Hp1: p-1=S(p-2)). destruct p. contradict H; auto. destruct p. contradict H; auto. simpl. rewrite <- minus_n_O; auto. destruct (nat_eq_dec e 0) as [He|He]. subst e; exists 1. apply ModRoot_intro with 1; simpl; auto. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H1. destruct m; auto; contradict H1; auto. assert (exists a k, ModOrder p a (p-1)/\ ModEq (p*p) (pow a (p-1)) (k*p+1) /\ 0<k<p). destruct (Prime_ModRoot H) as [a H1]. inversion H1. assert (t=p-1). apply Totient_unique with p; auto. inversion H3. inversion H8. subst n g t a0 k n0. destruct H11. destruct (ModEq_multN_lt H5) as [q H6]; auto. destruct (Divide_dec p q) as [H9|H9]. exists (a+p). destruct (divmod p ((p-1)*pow a (p-2))) as [[s [r [Ha Hb] _]]|Ha]. exists r. split. apply ModOrder_ModEq with a; auto. replace (a+p) with (1*p+a) at 1; auto. rewrite mult_1_l; auto. split. apply ModEq_trans with ((p-1)*pow a (p-2)*p+1). rewrite poly_combi. simpl. rewrite plus_comm. apply ModEq_plus. rewrite Hp1 at 1. simpl. rewrite plus_n_O. apply ModEq_plus. rewrite mult_1_r. replace (p-1-1) with (p-2). apply ModEq_mult; auto. apply ModEq_mult; auto. rewrite combi'_1; auto. rewrite Hp1. simpl; rewrite <- minus_n_O; auto. remember (seq 2 (p-2)) as l. apply ModEq_sym. cut (forall x, In x l->2<=x).  clear -l. induction l; simpl; intros; auto. apply Divide_plus. apply Divide_trans with (pow p a0); auto. replace a0 with (2+(a0-2)); auto. simpl. apply Divide_mult. rewrite mult_comm; auto. rewrite <- le_plus_minus; auto. apply IHl; auto. intros; subst l. apply in_seq in H10. destruct H10; auto. rewrite <- minus_n_O. rewrite mult_1_r. rewrite combi'_0. rewrite mult_1_l; auto. replace 1 with (0+1) at 2; auto. rewrite H6. apply ModEq_plus; auto. apply ModEq_sym. replace (q*p) with (p*q); auto. apply Divide_mult; auto.
  apply ModEq_plus; auto. remember ((p-1)*pow a (p-2)) as x. clear Heqx. subst x. rewrite mult_plus_distr_r. rewrite <- mult_assoc; auto. split; auto. destruct r; auto. assert (Divide p ((p-1)* pow a (p-2))). rewrite Ha. auto. apply Euclid in H10; auto. clear -H H7 H10. contradict H10. generalize (p-2) as n. induction n; simpl; intros C. apply Divide_le in C; auto. contradict C; auto. apply Euclid_Prime in C; auto. destruct C. absurd (p<=1); auto. inversion H7. apply H2; auto. contradiction. destruct (Prime_Coprime_Divide (p-1) H); auto. apply Divide_le in H11; auto. contradict H11; apply lt_not_le. destruct p; auto. simpl. rewrite <- minus_n_O; auto. subst p; contradict H; auto. exists a. destruct (divmod p q) as [[s [r [Ha Hb] _]]|Ha]. exists r. split; auto. split. rewrite H6. apply ModEq_plus; auto. subst q. rewrite mult_plus_distr_r. rewrite <- mult_assoc; auto. split; auto. destruct r; auto. contradict H9. subst q; auto. subst p; contradict H; auto.
  destruct H1 as [a [k [H2 [H3 [H4 H5]]]]]. exists a. assert (Coprime p a). inversion H2; auto. assert (Coprime (pow p e) a). destruct (Prime_pow_Coprime_Divide a e H); auto. destruct (le_lt_dec e 1) as [He2|He2]. inversion He2. subst e. rewrite pow1. apply ModRoot_intro with (p-1); auto. inversion H8. contradiction. apply ModRoot_intro with ((p-1)*pow p (e-1)); auto. 
  assert (ModEq (pow p e) (pow a (pow p (e-2)*(p-1))) (k*pow p (e-1)+1)). clear He H6. apply le_lt_or_eq in He2. destruct He2. induction H6. simpl. repeat rewrite mult_1_r. rewrite pow_mult. destruct (ModEq_multN_lt H3) as [s H6]. replace p with (S k+(p-S k)) at 2. rewrite mult_plus_distr_r. apply lt_le_trans with (S k*p); auto. simpl. rewrite plus_comm. apply plus_lt_compat_r; auto. rewrite <- le_plus_minus; auto. rewrite H6. rewrite plus_comm. rewrite poly_combi. simpl. rewrite combi'_0. rewrite mult_1_l. rewrite mult_1_r. rewrite <- minus_n_O. rewrite plus_n_O. apply ModEq_plus. rewrite plus_comm. rewrite poly_combi. simpl. rewrite combi'_0. rewrite pow_1n. rewrite plus_comm. apply ModEq_plus; auto. replace (seq 1 p) with (1::seq 2 (p-1)). simpl. rewrite combi'_1. rewrite pow_1n. repeat rewrite mult_1_r. rewrite plus_n_O. apply ModEq_plus. repeat rewrite mult_assoc. replace (p*k) with (k*p); auto. replace (seq 2 (p-1)) with (2::seq 3 (p-2)). simpl. rewrite pow_1n. repeat rewrite mult_1_r. apply ModEq_sym. apply Divide_plus. rewrite mult_comm. replace (combi' p 2*(k*p*(k*p))) with (p*p*(k*k*combi' p 2)). apply Divide_mult. apply Divide_trans with (combi' p 2); auto. apply combi'_Prime; auto. repeat rewrite mult_assoc. rewrite mult_comm. repeat rewrite <- mult_assoc. f_equal. rewrite mult_comm. repeat rewrite mult_assoc. f_equal. f_equal. auto. cut (forall x, In x (seq 3 (p-2)) -> 3<=x). generalize (seq 3 (p-2)). induction l; simpl; intros; auto. apply Divide_plus. rewrite pow_1n. rewrite mult_1_r. apply Divide_trans with (pow (k*p) a0); auto. rewrite pow_mult2. apply Divide_trans with (pow p a0); auto. replace (p*(p*p)) with (pow p 3). apply pow_Prime_Divide; auto. exists 3; auto. rewrite powS. f_equal. rewrite powS. rewrite pow1; auto. apply IHl; intros; auto. intros. apply in_seq in H7. destruct H7; auto. replace (p-1) with (S(p-2)); auto. replace p with (S(p-1)) at 2; auto. destruct p. contradict H; auto. simpl. rewrite <- minus_n_O; auto. replace (seq 1 p) with (1::seq 2 (p-1)). simpl. apply ModEq_sym. apply Divide_plus. rewrite combi'_1. rewrite mult_1_r. rewrite <- mult_assoc. apply Divide_mult. apply Divide_trans with (s*(p*p)); auto.
  cut (forall x, In x (seq 2 (p-1))->2<=x). generalize (seq 2 (p-1)). induction l; simpl; intros; auto. apply Divide_plus. rewrite pow_mult2. repeat rewrite mult_assoc. apply Divide_trans with (pow (p*p) a0); auto. replace (p*p*p) with (pow p 3). replace (pow (p*p) a0) with (pow p (2*a0)). apply pow_Prime_Divide; auto. exists 3. split; auto. apply le_trans with (2*2); auto. apply mult_le_compat_l. auto. rewrite mult_comm. rewrite pow_mult. f_equal. rewrite powS; rewrite pow1; auto. rewrite powS;
  repeat rewrite <- minus_Sn_m; auto. rewrite powS. rewrite pow1; auto. apply IHl; intros; auto. intros. apply in_seq in H7. destruct H7; auto. replace p with (S(p-1)) at 2; auto. destruct p. contradict H; auto. simpl. rewrite <- minus_n_O; auto.
  repeat rewrite <- minus_Sn_m; auto. repeat rewrite powS. rewrite <- mult_assoc. rewrite pow_mult. destruct (ModEq_multN_lt IHle) as [s H8]. replace m with (S(m-1)) at 2. rewrite powS. replace p with (S k+(p-S k)) at 2. rewrite mult_plus_distr_r. apply lt_le_trans with (S k*pow p (m-1)); auto. simpl. rewrite plus_comm. apply plus_lt_compat_r. apply le_trans with p; auto. apply pow_le; auto. destruct m. inversion H6. destruct m. contradict H6; auto. discriminate. rewrite <- le_plus_minus; auto. destruct m. inversion H6. simpl. rewrite <- minus_n_O; auto. rewrite H8. rewrite plus_comm. rewrite poly_combi. simpl. rewrite combi'_0. rewrite mult_1_l. rewrite mult_1_r. rewrite <- minus_n_O. rewrite plus_n_O. apply ModEq_plus. rewrite plus_comm. rewrite poly_combi. simpl. rewrite combi'_0. rewrite pow_1n. rewrite plus_comm. apply ModEq_plus; auto. replace (seq 1 p) with (1::seq 2 (p-1)). simpl. rewrite combi'_1. rewrite mult_1_r. rewrite pow_1n. rewrite mult_1_r. rewrite plus_n_O. apply ModEq_plus; auto. repeat rewrite mult_assoc. replace (p*k) with (k*p); auto. apply ModEq_sym. cut (forall x, In x (seq 2 (p-1)) -> 2<=x). generalize (seq 2 (p-1)). induction l; simpl; intros; auto. apply Divide_plus. rewrite pow_1n. rewrite mult_1_r. assert (2<=a0). auto. rewrite pow_mult2. rewrite mult_assoc. apply Divide_trans with (pow (pow p (m-1)) a0); auto. rewrite <- pow_mult. rewrite <- powS. apply pow_Prime_Divide; auto. exists (S m); auto. split; auto. destruct a0. inversion H9. destruct a0. contradict H9; auto. simpl. rewrite plus_assoc. apply le_trans with (m-1+(m-1)); auto. destruct m. inversion H6. destruct m. contradict H6; auto. destruct m. contradict H6; auto. simpl. repeat rewrite <- plus_n_Sm; auto. apply IHl. intros; auto. intros. apply in_seq in H7. destruct H7; auto. replace p with (S(p-1)) at 2; auto. destruct p. contradict H; auto. simpl. rewrite <- minus_n_O; auto.
  replace (seq 1 p) with (1::seq 2 (p-1)). simpl. rewrite combi'_1. apply ModEq_sym. apply Divide_plus. rewrite <- mult_assoc. apply Divide_mult. rewrite mult_1_r. rewrite mult_assoc; auto. cut (forall x, In x (seq 2 (p-1))->2<=x). generalize (seq 2 (p-1)). induction l; simpl; intros; auto. assert (2<=a0); auto. apply Divide_plus. rewrite pow_mult2. repeat rewrite mult_assoc. apply Divide_trans with (pow (pow p m) a0); auto. rewrite <- powS. rewrite <- pow_mult. apply pow_Prime_Divide; auto. exists (S m); split; auto. destruct a0. inversion H9. destruct a0. contradict H9; auto. simpl. rewrite plus_assoc. apply le_trans with (m+m); auto. destruct m; auto. rewrite <- plus_n_Sm; auto. apply IHl; auto. intros. apply in_seq in H7. destruct H7; auto. replace p with (S(p-1)) at 2; auto. destruct p; auto. simpl. rewrite <- minus_n_O; auto. subst e. rewrite pow0. rewrite pow1. rewrite mult_1_l. rewrite powS. rewrite pow1; auto. 
  destruct (modOrder H6) as [o H8]. assert (Divide o ((p-1)*pow p (e-1))). apply ModOrder_Divide with (k:=o) (a:=a) (n:=pow p e); auto. destruct (powDivide o (Prime_le H)) as [[q [b H10 H11]]|H10]. subst o. assert (Divide b (p-1)). apply Euclid with (pow p (e-1)); [|rewrite mult_comm; apply Divide_trans with (pow p q*b)]; auto. destruct (Prime_pow_Coprime_Divide b (e-1) H); auto; contradiction. assert (b=p-1). apply le_antisym; auto. inversion H2. inversion H13. apply H17. split. contradict H11; subst b; auto. apply ModEq_trans with (pow a (pow p q*b)). rewrite mult_comm. rewrite pow_mult. apply ModEq_pow. assert (ModEq p a (pow a p)). replace p with (S(p-1)) at 2. rewrite powS. replace a with (a*1) at 1. apply ModEq_mult; auto. rewrite mult_1_r; auto. destruct p. contradict H; auto. simpl. rewrite <- minus_n_O; auto. clear -H19. induction q; simpl; auto. rewrite mult_1_r; auto. rewrite pow_mult. apply ModEq_trans with (pow a p); auto. inversion H8. inversion H20. destruct H23. destruct (ModEq_multN_lt H26) as [s H27]. apply le_trans with p; auto. rewrite H27. rewrite <- plus_O_n. apply ModEq_plus; auto. apply ModEq_sym. destruct e. contradict He; auto. rewrite powS. rewrite mult_comm. rewrite <- mult_assoc; rewrite mult_comm; apply multN_Divide; auto. subst b.
  rewrite mult_comm in H9. apply Divide_div in H9; auto. apply pow_Prime_Divide in H9; auto. destruct H9 as [m [H9 H12]]. apply pow_cancel_r in H9; auto. subst m. apply le_lt_or_eq in H12. destruct H12; [|subst q]; auto. assert (Divide (pow p q*(p-1)) (pow p (e-2)*(p-1))). rewrite mult_comm. replace (pow p (e-2)*(p-1)) with ((p-1)*pow p (e-2)); auto. apply Divide_mult. apply pow_Prime_Divide; auto. exists q; split; auto. apply le_S_n. rewrite minus_Sn_m; auto. assert (ModEq (pow p e) 1 (k*pow p (e-1)+1)). eapply ModEq_trans; [|eapply H7]. apply ModEq_sym. apply ModOrder_Divide with (k:=pow p q*(p-1)) (a:=a) (n:=pow p e); auto. rewrite plus_comm in H13. replace 1 with (1+0) in H13 at 1; auto. apply ModEq_minus in H13. rewrite mult_comm in H13. replace (pow p e) with (pow p (e-1)*p) in H13. apply Divide_div in H13; auto. apply Divide_le in H13. contradict H5; auto. contradict H4; subst k; auto. rewrite mult_comm. rewrite <- powS. f_equal. destruct e. contradict He; auto. simpl. rewrite <- minus_n_O; auto. rewrite mult_comm; auto. inversion H8. inversion H12. destruct H15; contradiction. Qed. 

(* Carmichael function *)
Inductive Carmichael : relation nat :=
|Carm_0: Carmichael 0 1
|Carm_1: Carmichael 1 1
|Carm_2: Carmichael 2 1
|Carm_4: Carmichael 4 2
|Carm_2p: forall e, 3<=e -> Carmichael (pow 2 e) (pow 2 (e-2))
|Carm_p: forall p e, Prime p -> 3<=p -> e<>0 -> Carmichael (pow p e) ((p-1)*(pow p (e-1)))
|Carm_m: forall n m a b l, Coprime n m -> Carmichael n a -> Carmichael m b -> LCM l a b -> Carmichael (n*m) l
.
Hint Constructors Carmichael.
Theorem Carmichael_nz: forall n c, Carmichael n c -> c<>0. Proof. intros. induction H; auto. intros C. apply mult_is_O in C. destruct C. contradict H0. apply le_not_lt. rewrite le_plus_minus with 1 p; auto. rewrite H2; auto. contradict H2. apply pow_nz; auto. eapply LCM_nz; eauto. Qed.
Lemma Carmichael_1: forall x, Carmichael 1 x -> x=1. Proof. intros. remember 1 as n. revert Heqn. induction H; intros; auto. inversion Heqn. destruct e. inversion H. rewrite powS in Heqn. absurd (2<=1); auto. rewrite <- Heqn at 2. replace 2 with (2*1) at 1; auto. apply mult_le_compat_l. remember (pow 2 e) as n. destruct n; auto. symmetry in Heqn0. contradict Heqn0; auto. destruct e. contradict H1; auto. rewrite powS in Heqn. absurd (p<=1); auto. apply le_trans with (p*pow p e). replace p with (p*1) at 1; auto. apply mult_le_compat_l. remember (pow p e) as n. symmetry in Heqn0. destruct n; auto. contradict Heqn0; auto. rewrite mult_1_r; auto. rewrite Heqn; auto. apply mult_is_one in Heqn. destruct Heqn; subst n m; simpl. rewrite IHCarmichael1 in H2; auto. rewrite IHCarmichael2 in H2; auto. apply LCM_unique with 1 1; auto. Qed.
Lemma Carmichael_0: forall x, Carmichael 0 x -> x=1. Proof. intros. remember 0 as n. revert Heqn. induction H; intros; auto. inversion Heqn. inversion Heqn. contradict Heqn; auto. contradict Heqn; auto. rewrite Heqn. apply mult_is_O in Heqn. destruct Heqn. subst n. assert (m=1). apply GCD_unique with 0 m; auto. apply GCD_0n. contradict H; subst m; apply GCD_00. subst m. rewrite IHCarmichael1 in H2; auto. apply Carmichael_1 in H1. subst b. apply LCM_unique with 1 1; auto. subst m. rewrite IHCarmichael2 in H2; auto. assert (n=1). apply GCD_unique with n 0; auto. apply GCD_sym; apply GCD_0n. contradict H; subst n; apply GCD_00. subst n. apply Carmichael_1 in H0. subst a. apply LCM_unique with 1 1; auto. Qed.
Lemma Carmichael_2: forall x, Carmichael 2 x -> x=1. Proof. intros. remember 2 as n. revert Heqn. induction H; intros; auto; try inversion Heqn. absurd (8<=2). apply le_not_lt; auto. rewrite <- H1 at 2. clear -H. induction H; auto. rewrite powS. apply le_trans with (pow 2 m); simpl; auto. contradict H0. apply le_not_lt. rewrite <- H3. destruct e. contradict H1; auto. rewrite powS. replace p with (p*1) at 1. apply mult_le_compat_l. remember (pow p e) as n. symmetry in Heqn0. destruct n; auto. contradict Heqn0; auto. rewrite mult_1_r; auto. assert (Divide n 2). rewrite <- H4; rewrite mult_comm; auto. apply Prime_Divide in H3; auto. destruct H3. subst n. rewrite mult_1_l in H4; subst m. rewrite IHCarmichael2 in H2; auto. apply Carmichael_1 in H0; subst a. apply LCM_unique with 1 1; auto. subst n. assert (m=1). apply Nat.mul_cancel_l with 2; auto. subst m. rewrite IHCarmichael1 in H2; auto. apply Carmichael_1 in H1; subst b. apply LCM_unique with 1 1; auto. Qed.
Lemma Carmichael_4: forall x, Carmichael 4 x -> x=2. Proof. intros. remember 4 as n. revert Heqn. induction H; intros; auto; try inversion Heqn. absurd (8<=4); auto. apply le_not_lt; auto. rewrite <- H1 at 2. clear -H. induction H; auto. rewrite powS. apply le_trans with (pow 2 m); simpl; auto. absurd (Divide 2 (pow p e)). clear -H H0. induction e; simpl. intros C. apply Divide_le in C; auto. contradict IHe. apply Euclid_Prime in IHe; auto. destruct IHe; auto. apply Prime_Divide in H1; auto. destruct H1. inversion H1. subst p; contradict H0; auto. rewrite H3. replace 4 with (2*2); auto. replace 4 with (pow_mult_fold ((2,2)::nil)) in H4; auto. apply Coprime_mult_pow_Prime in H4; simpl; auto. destruct H4 as [l1 [l2 [H4 H5] H6]]. apply Perm_one in H6. destruct l1. simpl in H6. subst l2. simpl in H4. subst n. simpl in H5. subst m. rewrite IHCarmichael2 in H2; auto. apply Carmichael_1 in H0. subst a. apply LCM_unique with 1 2; auto. inversion H6. subst p. apply app_eq_nil in H8. destruct H8; subst l1 l2. simpl in H4. simpl in H5. subst n m. rewrite IHCarmichael1 in H2; auto. apply Carmichael_1 in H1. subst b. apply LCM_unique with 2 1; auto. Qed.
Lemma Carmichael_2pow: forall x e, 3<=e -> Carmichael (pow 2 e) x -> x=pow 2 (e-2). Proof. intros. remember (pow 2 e) as n. revert Heqn. induction H0; intros; auto. symmetry in Heqn; contradict Heqn; auto. absurd (2<=1); auto. rewrite Heqn at 2. destruct e. inversion H. rewrite powS. replace 2 with (2*1) at 1. apply mult_le_compat_l. remember (pow 2 e) as n. symmetry in Heqn0. destruct n; auto; contradict Heqn0; auto. rewrite mult_1_r; auto. absurd (8<=2); auto. apply lt_not_le; auto. rewrite Heqn at 2. clear -H. induction H; auto. apply le_trans with (pow 2 m); auto. rewrite powS; simpl; auto. absurd (8<=4); auto. apply lt_not_le; auto. rewrite Heqn at 2. clear -H. induction H; auto. apply le_trans with (pow 2 m); auto. rewrite powS; simpl; auto. apply pow_cancel_r in Heqn; auto. assert (Divide p (pow 2 e)). rewrite <- Heqn. destruct e0. contradict H2; auto. rewrite powS; rewrite mult_comm; auto. replace (pow 2 e) with (fold_right mult 1 (repeat 2 e)) in H3. apply Prime_mult_In in H3; auto. apply repeat_spec in H3. contradict H1; subst p; auto. clear -e. induction e; simpl; auto. clear -e. induction e; simpl; auto. replace (pow 2 e) with (pow_mult_fold ((2,e)::nil)) in Heqn; auto. apply Coprime_mult_pow_Prime in Heqn; simpl; auto. destruct Heqn as [l1 [l2 [H2 H3] H4]]. apply Perm_one in H4. destruct l1. simpl in H4. subst l2. simpl in H2. simpl in H3. rewrite mult_1_r in H3. subst n m. rewrite IHCarmichael2 in H1; auto. apply Carmichael_1 in H0_. subst a. apply LCM_unique with 1 (pow 2 (e-2)); auto. inversion H4. apply app_eq_nil in H7. destruct H7; subst l1 l2 p. simpl in H2. simpl in H3. rewrite mult_1_r in H2. subst n m. rewrite IHCarmichael1 in H1; auto. apply Carmichael_1 in H0_0. subst b. apply LCM_unique with (pow 2 (e-2)) 1; auto. cut (e<>0); intros; auto. contradict H; subst e; auto. simpl. rewrite mult_1_r; auto. Qed.
Lemma Carmichael_Prime_pow: forall x p e, Prime p -> 3<=p -> e<>0 -> Carmichael (pow p e) x -> x=(p-1)*pow p (e-1). Proof. intros. remember (pow p e) as n. revert Heqn. induction H2; intros; auto. symmetry in Heqn; contradict Heqn; auto. absurd (p<=1); auto. rewrite Heqn. destruct e. contradict H1; auto. rewrite powS. replace p with (p*1) at 1. apply mult_le_compat_l. remember (pow p e) as n. symmetry in Heqn0. destruct n; auto; contradict Heqn0; auto. rewrite mult_1_r; auto. absurd (3<=2); auto. rewrite Heqn at 2. apply le_trans with p; auto. assert (Divide 2 (pow p e)). rewrite <- Heqn. replace 4 with (2*2); auto. apply pow_Prime_Divide in H2; auto. destruct H2 as [m [H2 H3]]. destruct m. inversion H2. rewrite powS in H2. assert (Divide p 2). rewrite H2; rewrite mult_comm; auto. contradict H0; auto. contradict H0. replace p with 2; auto. apply repeat_spec with e. apply Prime_mult_In; auto. clear -H. induction e; simpl; auto. replace (fold_right mult 1 (repeat p e)) with (pow p e). rewrite <- Heqn. destruct e0. inversion H2. rewrite powS; rewrite mult_comm; auto. clear -e; induction e; simpl; auto. assert (p0=p). apply repeat_spec with e. apply Prime_mult_In; auto. clear -H; induction e; simpl; auto. replace (fold_right mult 1 (repeat p e)) with (pow p e). rewrite <- Heqn. destruct e0. contradict H4; auto. rewrite powS; rewrite mult_comm; auto. clear -e; induction e; simpl; auto. subst p0. apply pow_cancel_r in Heqn. subst e0; auto. apply le_trans with 3; auto. assert (Ha:(p-1)*pow p (e-1)<>0). intros C. apply mult_is_O in C. destruct C. contradict H. destruct p; auto. destruct p; auto. simpl in H4. inversion H4. contradict H4; auto. replace (pow p e) with (pow_mult_fold ((p,e)::nil)) in Heqn. apply Coprime_mult_pow_Prime in Heqn; simpl; auto. destruct Heqn as [l1 [l2 [H4 H5] H6]]. apply Perm_one in H6. destruct l1. simpl in H6. subst l2. simpl in H4. simpl in H5. rewrite mult_1_r in H5. subst n m. rewrite IHCarmichael2 in H3; auto. apply Carmichael_1 in H2_. subst a. eapply LCM_unique. eapply H3. auto. inversion H6. apply app_eq_nil in H9. destruct H9; subst p0 l1 l2. simpl in H4. simpl in H5. rewrite mult_1_r in H4. subst n m. rewrite IHCarmichael1 in H3; auto. apply Carmichael_1 in H2_0. subst b. eapply LCM_unique. eapply H3. auto. simpl. rewrite mult_1_r; auto. Qed.
Definition carmichael_prime_pow_sig: forall p e, Prime p-> {c|Carmichael (pow p e) c & forall x, Carmichael (pow p e) x -> x=c}. intros. destruct (nat_eq_dec e 0) as [He|He]. subst e. simpl. exists 1; auto. intros. apply Carmichael_1; auto. destruct (le_lt_dec p 2) as [Hp|Hp]. replace p with 2. destruct (le_lt_dec e 2). destruct e. contradict He; auto. destruct e. exists 1; intros; auto. apply Carmichael_2; auto. destruct e. exists 2; intros; auto. apply Carmichael_4; auto. contradict l; apply lt_not_le; auto. exists (pow 2 (e-2)); intros; auto. apply Carmichael_2pow; auto. apply le_antisym; auto. exists ((p-1)*pow p (e-1)); intros; auto. apply Carmichael_Prime_pow; auto. Defined.
Definition carmichael_prime_pow (p e:nat) := match Prime_dec p with |left Hp => match carmichael_prime_pow_sig e Hp with |exist2 _ _ c _ _ => c end |right _ => 0 end.
Lemma carmichael_prime_pow_spec: forall p e, Prime p -> Carmichael (pow p e) (carmichael_prime_pow p e). Proof. intros. unfold carmichael_prime_pow. destruct (Prime_dec p); [|contradiction]. destruct (carmichael_prime_pow_sig e p0); auto. Qed.
Lemma carmichael_prime_pow_spec2: forall p e x, Prime p -> Carmichael (pow p e) x -> carmichael_prime_pow p e=x. Proof. intros. unfold carmichael_prime_pow. destruct (Prime_dec p); [|contradiction]. destruct (carmichael_prime_pow_sig e p0). symmetry; auto. Qed.
Hint Resolve Carmichael_nz Carmichael_1 Carmichael_0 Carmichael_2 Carmichael_4 Carmichael_2pow Carmichael_Prime_pow carmichael_prime_pow_spec carmichael_prime_pow_spec2.

Definition nil_dec: forall {T:Type} (l:list T), {l=nil}+{l<>nil}. intros. destruct l. left; auto. right. intros C; inversion C. Defined.
Lemma Carmichael_pow_mult_fold: forall l c, Forall Prime (map fst l) -> NoDup (map fst l) -> Forall (fun n=>n<>0) (map snd l) -> LCMs c (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l) -> Carmichael (pow_mult_fold l) c /\ forall x, Carmichael (pow_mult_fold l) x -> x=c. Proof. intros l. apply (Fix (well_founded_ltof (list (nat*nat)) (length (A:=nat*nat)))) with (P:=fun l=>forall c, Forall Prime (map fst l) -> NoDup (map fst l) -> Forall (fun n=>n<>0) (map snd l) -> LCMs c (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l) -> Carmichael (pow_mult_fold l) c /\ forall x, Carmichael (pow_mult_fold l) x -> x=c). clear l. intros l IH. intros. split. destruct l as [|[p e] l]; intros. simpl. replace c with 1; auto. eapply LCMs_unique; [|eapply H2]. apply MinP_intro; simpl; auto. intros. destruct H3. destruct m; auto; contradict H3; auto. inversion H. inversion H0. inversion H1. subst x l0 x0 l1 x1 l2. clear H H0 H1. simpl in H2. destruct (lcms_sig (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l)) as [[d H]|H]. apply LCMs_cons_rev with (a:=d) in H2; auto. simpl. apply Carm_m with (carmichael_prime_pow p e) d; auto. destruct (Prime_pow_Coprime_Divide (pow_mult_fold l) e H5); auto. apply pow_mult_fold_In in H0; auto. destruct H0 as [f H0 H1]. contradict H9. apply in_map_iff. exists (p,f); auto. destruct (IH l) with (c:=d); auto. unfold ltof; auto. apply in_map_iff in H. destruct H as [[q f] [H H0]]. simpl in H. contradict H. unfold carmichael_prime_pow. destruct (Prime_dec q) as [Hq|Hq]. destruct (carmichael_prime_pow_sig f Hq). apply Carmichael_nz in c0; auto. contradict Hq. apply Forall_forall with (x:=q) in H6; auto. apply in_map_iff. exists (q,f); auto.
  intros. remember (pow_mult_fold l) as a. revert Heqa. induction H3; intros. symmetry in Heqa. contradict Heqa. apply pow_mult_fold_nz. apply Forall_imp with Prime; auto. replace 1 with (pow_mult_fold nil) in Heqa; auto. apply Prime_pow_mult_fold_Perm in Heqa; simpl; auto. destruct l. simpl in H2. apply LCMs_unique with nil; auto. apply MinP_intro; auto. intros. destruct H3. destruct m; auto; contradict H3; auto. absurd (In p nil); auto. apply Perm_In with (p::l); auto. replace 2 with (pow_mult_fold ((2,1)::nil)) in Heqa; auto. apply Prime_pow_mult_fold_Perm in Heqa; simpl; auto. apply Perm_one in Heqa. subst l. simpl in H2. eapply LCMs_unique; [|eapply H2]. rewrite carmichael_prime_pow_spec2 with (x:=1); auto. replace 4 with (pow_mult_fold ((2,2)::nil)) in Heqa; auto. apply Prime_pow_mult_fold_Perm in Heqa; simpl; auto. apply Perm_one in Heqa. subst l. simpl in H2. eapply LCMs_unique; [|eapply H2]. rewrite carmichael_prime_pow_spec2 with (x:=2); auto. replace (pow 2 e) with (pow_mult_fold ((2,e)::nil)) in Heqa. apply Prime_pow_mult_fold_Perm in Heqa; simpl; auto. apply Perm_one in Heqa. subst l. simpl in H2. eapply LCMs_unique; [|eapply H2]. rewrite carmichael_prime_pow_spec2 with (x:=pow 2 (e-2)); auto. apply Forall_cons; auto. contradict H3; subst e; auto. simpl. rewrite mult_1_r; auto. replace (pow p e) with (pow_mult_fold ((p,e)::nil)) in Heqa. apply Prime_pow_mult_fold_Perm in Heqa; simpl; auto. apply Perm_one in Heqa. subst l. simpl in H2. eapply LCMs_unique; [|eapply H2]. rewrite carmichael_prime_pow_spec2 with (x:=(p-1)*pow p (e-1)); auto. apply LCMs_one. intros C. apply mult_is_O in C. destruct C. contradict H3. destruct p; auto. destruct p; auto. inversion H6. contradict H6; auto. simpl. rewrite mult_1_r; auto.
  destruct (Coprime_mult_pow_Prime l H3) as [l1 [l2 [H5 H6] H7]]; auto. subst n m. clear Heqa. destruct (nil_dec l1) as [Ha|Ha]. subst l1. simpl in H7. simpl in H3_. apply Carmichael_1 in H3_. subst a. rewrite <- IHCarmichael2; auto. apply LCM_unique with 1 b; auto. apply LCM_sym. apply LCM_1. apply Carmichael_nz in H3_0; auto. destruct (nil_dec l2) as [Hb|Hb]. subst l2. rewrite app_nil_r in H7. simpl in H3_0. apply Carmichael_1 in H3_0. subst b. rewrite <- IHCarmichael1; auto. apply LCM_unique with a 1; auto. apply LCM_1. apply Carmichael_nz in H3_; auto. clear IHCarmichael1 IHCarmichael2. assert (incl l1 l). intros x Hx. apply Perm_In with (l1++l2); auto. apply in_or_app; auto. assert (incl l2 l). intros x Hx. apply Perm_In with (l1++l2); auto. apply in_or_app; auto. assert (forall (f:nat*nat->nat) m, incl m l -> incl (map f m) (map f l)). intros. intros x Hx. apply in_map_iff in Hx. destruct Hx as [y [H9 H10]]. apply in_map_iff. exists y; auto. assert (NoDup (map fst l1)). apply NoDup_app_rev with (map fst l2). apply NoDup_Perm with (map fst l); auto. rewrite <- map_app. apply Perm_map. apply Perm_trans with (l1++l2); auto. assert (NoDup (map fst l2)). apply NoDup_app_rev with (map fst l1). apply NoDup_Perm with (map fst l); auto. rewrite <- map_app; auto. destruct (lcms_sig (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l1)) as [[a' H11]|H11]. destruct (IH l1) with (c:=a'); auto. unfold ltof. apply Perm_length in H7. rewrite H7. rewrite app_length. destruct l2. contradict Hb; auto. simpl. rewrite <- plus_n_Sm. auto. apply Forall_incl with (map fst l); auto. apply Forall_incl with (map snd l); auto. apply H13 in H3_. subst a'. destruct (lcms_sig (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l2)) as [[b' H14]|H14]. destruct (IH l2) with b'; auto. unfold ltof. apply Perm_length in H7. rewrite H7. rewrite app_length. destruct l1. contradict Ha; auto. simpl; auto. apply Forall_incl with (map fst l); auto. apply Forall_incl with (map snd l); auto.
  apply H16 in H3_0. subst b'. apply LCMs_Perm with (m:=map (fun p=>carmichael_prime_pow (fst p) (snd p)) (l1++l2)) in H2; auto. rewrite map_app in H2. eapply LCMs_unique; [|eapply H2]. apply LCMs_app with a b; auto. apply in_map_iff in H14. destruct H14 as [[p e] [H14 H15]]. contradict H14. simpl. assert (Prime p). apply H6 in H15. apply Forall_forall with (x:=p) in H; auto. apply in_map_iff. exists (p,e); auto. apply Carmichael_nz with (pow p e); auto. apply in_map_iff in H11. destruct H11 as [[p e] [H11 H12]]. contradict H11. assert (Prime p). apply Forall_forall with (x:=p) in H; auto. apply in_map_iff. exists (p,e); auto. apply Carmichael_nz with (pow p e); auto. Qed.
 
Definition carmichael_sig: forall n, {c|Carmichael n c & forall x, Carmichael n x->x=c}. intros. destruct (fundamental2 n) as [[l [H [H0 [H1 H2] ]] H3]|H]. subst n. destruct (lcms_sig (map (fun p=>carmichael_prime_pow (fst p) (snd p)) l)) as [[c H4]|H4]. exists c; apply Carmichael_pow_mult_fold; auto. apply in_map_iff in H4. exfalso. destruct H4 as [[p e] [H4 H5]]. contradict H4. assert (Prime p). apply Forall_forall with (x:=p) in H0; auto. apply in_map_iff. exists (p,e); auto. apply Carmichael_nz with (pow p e); auto. subst n. exists 1; auto. Defined.
Theorem Carmichael_unique: forall n c d, Carmichael n c -> Carmichael n d -> c=d. Proof. intros. destruct (carmichael_sig n) as [e He Hf]. rewrite Hf; auto. Qed.
Theorem Carmichael_Prime: forall p, Prime p -> Carmichael p (p-1). Proof. intros. destruct (le_lt_dec p 2). replace p with 2; auto. apply le_antisym; auto. replace p with (pow p 1) at 1; auto. replace (p-1) with ((p-1)*pow p (1-1)); auto. simpl. rewrite mult_1_r; auto. Qed.

Theorem Carmichael_Prime_pow_Mod: forall p e a, Prime p -> Coprime (pow p e) a -> ModEq (pow p e) (pow a (carmichael_prime_pow p e)) 1. Proof. intros. destruct (nat_eq_dec e 0) as [He|He]. subst e; auto. destruct (le_lt_dec p 2). assert (p=2). apply le_antisym; auto. subst p. destruct (le_lt_dec e 2). inversion l0. subst e. simpl. simpl in H0. rewrite carmichael_prime_pow_spec2 with (x:=2); auto. apply Euler; auto. replace 2 with ((2-1)*pow 2 (2-1)) at 2; auto. replace 4 with (pow 2 2); auto. inversion H2. subst m e. simpl in H0. simpl. rewrite carmichael_prime_pow_spec2 with (x:=1); auto. apply Euler; auto. replace 1 with (2-1) at 2; auto. inversion H4. contradiction. rewrite carmichael_prime_pow_spec2 with (x:=pow 2 (e-2)); auto. revert H0. revert a. clear -l0. induction l0; intros. simpl in H0. simpl. rewrite mult_1_r. destruct (divmod 4 a) as [[q [r [H1 H2] _]]|H1]; [|inversion H1]. replace 1 with (0+1) at 2; auto. subst a. inversion H2. subst r. rewrite mult_plus_distr_l. rewrite mult_plus_distr_r. rewrite mult_plus_distr_r. rewrite plus_assoc. apply ModEq_plus. apply ModEq_sym. rewrite <- plus_assoc. apply Divide_plus. apply Divide_trans with (4*(q*4)); auto. rewrite mult_comm. rewrite <- mult_assoc. replace (4*4) with (2*8); auto. rewrite mult_assoc; auto. rewrite <- mult_assoc; auto. rewrite mult_assoc. replace (q*4*3) with (3*q*4). rewrite <- mult_plus_distr_l; auto. symmetry; rewrite mult_comm; rewrite mult_assoc; auto. replace (3*3) with (8+1); auto. inversion H1. subst m r. absurd (2<=1); auto. inversion H0. apply H3; auto. split. replace 8 with (4*2); auto. apply Divide_plus; auto. apply Divide_trans with 4; auto. replace 4 with (2*2); auto. inversion H4. subst r. rewrite mult_plus_distr_r. rewrite mult_1_l. rewrite mult_plus_distr_l. rewrite mult_1_r. rewrite plus_assoc. apply ModEq_plus; auto. apply ModEq_sym. rewrite <- plus_assoc. apply Divide_plus. rewrite <- mult_assoc. apply Divide_trans with (4*(q*4)); auto. rewrite mult_comm. rewrite <- mult_assoc. replace (4*4) with (2*8); auto. rewrite mult_assoc; auto. rewrite <- mult_plus_distr_l; auto. inversion H6. subst r. absurd (4<=1); auto. inversion H0. apply H8. replace 8 with (2*4); auto. inversion H8.
  assert (Coprime (pow 2 m) a). destruct (Prime_pow_Coprime_Divide a m Prime2); auto. absurd (2<=1); auto. inversion H0. apply H2. split; auto. rewrite powS. rewrite mult_comm; auto. apply IHl0 in H. replace 1 with (0+1) at 4; auto. destruct (ModEq_multN_lt H) as [q H1]. apply pow_le. contradict l0; subst m; auto. rewrite <- minus_Sn_m; auto. rewrite powS. rewrite powS. rewrite <- powS. rewrite pow_mult. rewrite H1. rewrite powS. rewrite powS. rewrite pow1. rewrite mult_plus_distr_l. rewrite mult_1_r. rewrite mult_plus_distr_r. rewrite mult_1_l. rewrite plus_assoc. apply ModEq_plus; auto. apply ModEq_sym. rewrite <- plus_assoc. apply Divide_plus. apply Divide_trans with (pow 2 m*pow 2 m). rewrite mult_comm. apply Divide_mult. destruct m. inversion l0. rewrite powS; rewrite mult_comm; auto. rewrite <- mult_assoc. apply Divide_trans with (pow 2 m*(q*pow 2 m)); auto. rewrite <- mult_plus_distr_l. simpl. rewrite <- plus_n_O; auto. rewrite carmichael_prime_pow_spec2 with (x:=(p-1)*pow p (e-1)); auto. Qed.
Theorem Carmichael_pow_Mod: forall n c a, Carmichael n c -> Coprime n a -> ModEq n (pow a c) 1. Proof. intros n. destruct (fundamental2 n) as [[l [H [H0 [H1 H2]]]_]|H]. subst n. revert H2 H1 H0. induction l as [|[p e] l]; simpl; intros; auto. inversion H2. inversion H1. inversion H0. subst x x0 x1 l0 l1 l2. clear H0 H1 H2. assert (Coprime (pow p e) (pow_mult_fold l)). destruct (Prime_pow_Coprime_Divide (pow_mult_fold l) e H14); auto. contradict H10. destruct (pow_mult_fold_In l) with (p:=p); auto. apply in_map_iff.  exists (p,x); auto. destruct (carmichael_sig (pow_mult_fold l)) as [c' H1 _]. destruct (lcm_sig (carmichael_prime_pow p e) c') as [[c'' H2]|[H2|H2]]. replace c'' with c in H2. inversion H2. destruct H4. destruct H9. subst n. apply ModEq_Coprime_mult; auto. destruct (Divide_multN H9). subst c. cut (ModEq (pow p e) (pow a (carmichael_prime_pow p e)) 1); intros. rewrite pow_mult. clear -H8; induction x; simpl; auto. replace 1 with (1*1); auto. apply Coprime_sym in H3; apply Coprime_mult_rev in H3; destruct H3. clear -H3 H14 H6. apply Carmichael_Prime_pow_Mod; auto.
  apply Divide_multN in H12. destruct H12 as [q H12].  subst c. rewrite pow_mult.  replace 1 with (pow 1 q); auto. apply ModEq_pow. apply IHl; auto. apply Coprime_sym in H3; apply Coprime_mult_rev in H3; destruct H3; auto. apply Carmichael_unique with (pow p e*pow_mult_fold l); auto. apply Carm_m with (carmichael_prime_pow p e) c'; auto. contradict H2. apply Carmichael_nz with (pow p e); auto. contradict H2. apply Carmichael_nz with (pow_mult_fold l); auto. subst n. intros. apply Carmichael_0 in H. subst c. rewrite pow1. replace a with 1; auto. inversion H0. apply le_antisym. destruct a; auto. apply H1; auto. Qed.

Theorem Carmichael_ModOrder_Prime_pow: forall p e c, Prime p -> Carmichael (pow p e) c -> exists a, ModOrder (pow p e) a c. Proof. intros. destruct (nat_eq_dec e 0) as [He|He]. subst e. apply Carmichael_1 in H0. subst c. exists 1. simpl. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H0. destruct m; auto; contradict H0; auto. destruct (le_lt_dec p 2). assert (p=2). apply le_antisym; auto. subst p. destruct (le_lt_dec e 2). inversion l0. subst e. simpl. apply Carmichael_4 in H0. subst c. exists 3. apply ModOrder_intro; auto. replace 4 with (1*3+1); auto. apply MinP_intro. split; auto. simpl. replace 9 with (2*4+1); auto. intros. destruct H0. destruct m. contradict H0; auto. destruct m. simpl in H1. apply ModEq_le_eq in H1; auto. auto. inversion H2. subst m e. simpl. simpl in H0. apply Carmichael_2 in H0. subst c. exists 1. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H0. destruct m; auto; contradict H0; auto. inversion H4. contradiction. apply Carmichael_2pow in H0; auto. subst c. clear -l0. exists 5. cut (ModEq (pow 2 e) (pow 5 (pow 2 (e-3))) (pow 2 (e-1)+1)). intros. assert (Coprime (pow 2 e) 5). destruct (Prime_pow_Coprime_Divide 5 e Prime2); auto. replace 5 with (2*2+1) in H0; auto. apply Divide_minus in H0; auto. apply Divide_le in H0; auto. contradict H0; auto. destruct (modOrder H0) as [o H1]. assert (ModEq (pow 2 e) (pow 5 (pow 2 (e-2))) 1). replace (e-2) with (S (e-3)). rewrite powS. rewrite pow_mult. apply ModEq_trans with (pow (pow 2 (e-1)+1) 2); auto. replace 1 with (0+1) at 6; auto. rewrite powS. rewrite pow1. rewrite mult_plus_distr_r. rewrite mult_1_l. rewrite plus_assoc. apply ModEq_plus; auto. rewrite mult_plus_distr_l. rewrite mult_1_r. rewrite <- plus_assoc. apply ModEq_sym; apply Divide_plus. rewrite <- pow_plus. apply pow_Prime_Divide; auto. exists e; split; auto. destruct e. inversion l0. simpl. rewrite <- minus_n_O. destruct e. contradict l0; auto. simpl. apply le_n_S. rewrite plus_comm; auto. replace (pow 2 (e-1)+pow 2 (e-1)) with (pow 2 e); auto. replace e with (S(e-1)) at 1. rewrite powS. simpl; auto. destruct e. inversion l0. simpl. rewrite <- minus_n_O; auto. rewrite minus_Sn_m; auto.
  assert (Divide o (pow 2 (e-2))). apply ModOrder_Divide with (d:=pow 2 (e-2)) in H1. apply H1; auto. apply pow_Prime_Divide in H3; auto. destruct H3 as [x [H4 H5]]. subst o. apply le_lt_or_eq in H5. destruct H5; [|subst x]; auto. absurd (pow 2 (e-1)+1 = 1). rewrite plus_comm. intros C. inversion C. contradict H5; auto. apply ModEq_le_eq with (pow 2 e). apply ModEq_trans with (pow 5 (pow 2 (e-3))); auto. apply ModOrder_Divide with (k:=pow 2 x); auto. apply pow_Prime_Divide; auto. exists x; split; auto. apply le_S_n. rewrite minus_Sn_m; auto. replace e with (S(e-1)) at 2. rewrite powS. simpl. apply plus_lt_compat_l. rewrite <- plus_n_O. apply pow_le. destruct e. inversion l0. destruct e. contradict l0; auto. simpl. discriminate. destruct e. inversion l0. simpl; rewrite <- minus_n_O; auto. apply pow_le; auto. contradict l0; subst e; auto. induction l0. simpl; auto. destruct (ModEq_multN_lt IHl0) as [q H]. replace m with (S(m-1)) at 2. rewrite powS. simpl. rewrite <- plus_n_O. apply plus_lt_compat_l. apply pow_le. destruct m. inversion l0. destruct m. contradict l0; auto. simpl. discriminate. destruct m. inversion l0. simpl; rewrite <- minus_n_O; auto. rewrite <- minus_Sn_m; auto. rewrite powS. rewrite powS. rewrite pow_mult. rewrite H. rewrite powS. rewrite pow1. repeat rewrite mult_plus_distr_l. repeat rewrite mult_plus_distr_r. repeat rewrite mult_1_r. repeat rewrite mult_1_l. repeat rewrite plus_assoc. apply ModEq_plus; auto. replace (pow 2 (S m-1)) with (pow 2 (m-1)+pow 2 (m-1)). apply ModEq_plus; auto. rewrite plus_comm. rewrite plus_assoc. replace (pow 2 (m-1)) with (0+pow 2 (m-1)) at 6; auto. apply ModEq_plus; auto. apply ModEq_sym. rewrite plus_assoc. apply Divide_plus. rewrite plus_comm. repeat rewrite <- plus_assoc. apply Divide_plus. rewrite <- mult_assoc. apply Divide_trans with (pow 2 m*(q*pow 2 m)); auto. rewrite mult_comm. apply Divide_mult.  apply Divide_trans with (pow 2 m); auto. destruct m. inversion l0. rewrite powS. rewrite mult_comm; auto. apply Divide_plus. rewrite <- powS. rewrite mult_comm. rewrite <- mult_assoc. apply Divide_trans with (pow 2 m*pow 2 (m-1)); auto. rewrite <- pow_plus. apply pow_Prime_Divide; auto. exists (S m); split; auto. destruct m. inversion l0. simpl. apply le_n_S. destruct m. contradict l0; auto. simpl. apply le_n_S. rewrite plus_comm; auto.
  rewrite plus_comm. rewrite <- plus_assoc. apply Divide_plus. rewrite <- mult_assoc. rewrite <- powS. apply Divide_trans with (pow 2 m*pow 2 (m-1)); auto. rewrite <- pow_plus. apply pow_Prime_Divide; auto. exists (S m); split; auto. destruct m. inversion l0. simpl; apply le_n_S. destruct m. contradict l0; auto. simpl; apply le_n_S. rewrite plus_comm; auto. rewrite <- mult_plus_distr_l; simpl. rewrite <- plus_n_O; auto. rewrite <- pow_plus. rewrite <- powS. apply pow_Prime_Divide; auto. exists (S m); split; auto. destruct m. inversion l0. destruct m. contradict l0; auto. destruct m. contradict l0; auto. simpl. repeat apply le_n_S. rewrite plus_comm; auto. rewrite <- minus_Sn_m; auto. rewrite powS. simpl. rewrite <- plus_n_O; auto.
  destruct (Prime_pow_ModRoot e H) as [a H1]; auto. apply Carmichael_Prime_pow in H0; auto. subst c. inversion H1. exists a. replace ((p-1)*pow p (e-1)) with t; auto. apply Totient_unique with (pow p e); auto. Qed. 
Theorem Carmichael_ModOrder: forall n c, Carmichael n c -> exists a, ModOrder n a c. Proof. intros n. destruct (fundamental2 n) as [[l [H [H0 [H1 H2]]] _]|H]. subst n. revert H2. revert H1. revert H0. induction l as [|[p e] l]; intros. simpl; exists 1. apply Carmichael_1 in H. subst c. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H. destruct m; auto; contradict H; auto. inversion H0. inversion H1. inversion H2. subst x x0 x1 l0 l1 l2. clear H0 H1 H2. destruct (carmichael_sig (pow_mult_fold l)) as [c1 H1 H2]. destruct IHl with c1 as [a1 H0]; auto. destruct (carmichael_sig (pow p e)) as [c2 H3 H4]. destruct (Carmichael_ModOrder_Prime_pow e H5 H3) as [a2 H7]. assert (Coprime (pow p e) (pow_mult_fold l)). destruct (Prime_pow_Coprime_Divide (pow_mult_fold l) e H5); auto. destruct (pow_mult_fold_In l) with (p:=p) as [f H11 H12]; auto. contradict H9. apply in_map_iff. exists (p,f); auto. destruct (Chinese H8 a2 a1) as [a [H11 H12] _]. exists a. simpl. apply ModOrder_mult2 with c2 c1; auto. apply ModOrder_ModEq with a2; auto. apply ModOrder_ModEq with a1; auto. destruct (lcm_sig c2 c1) as [[c' H15]|[H15|H15]]. replace c with c'; auto. eapply Carmichael_unique; [|eapply H]. simpl. apply Carm_m with c2 c1; auto. apply Carmichael_nz in H3; contradiction. apply Carmichael_nz in H1; contradiction. subst n. intros. apply Carmichael_0 in H. subst c. exists 1. apply ModOrder_intro; auto. apply MinP_intro; auto. intros. destruct H. destruct m; auto; contradict H; auto. Qed.

Theorem Carmichael_optimum: forall n c x, Carmichael n c -> x<>0 -> (forall a, Coprime n a-> ModEq n (pow a x) 1) -> c<=x. Proof. intros. destruct (Carmichael_ModOrder H) as [a H2]. inversion H2. inversion H4. apply H8; auto. Qed.

(* RSA *)
Record RSAKey : Set := mkRSAKey {
  prime1:nat; prime2:nat; modkey:nat; seckey:nat; pubkey:nat;
  isPrime1: Prime prime1;
  isPrime2: Prime prime2;
  prime_neq: prime1 <> prime2;
  modkey_mult: modkey = prime1 * prime2;
  modkey_nz: modkey <> 0;
  pubkey_coprime: Coprime (totient modkey) pubkey;
  pubkey_le: pubkey <= totient modkey;
  keyinv: ModEq (totient modkey) (seckey*pubkey) 1;
}.

Definition generateRSAKey (p q e:nat) : Prime p -> Prime q -> p<>q -> e<=(p-1)*(q-1) -> Coprime ((p-1)*(q-1)) e -> RSAKey. intros. assert (totient (p*q) = (p-1)*(q-1)). unfold totient. destruct (totient_sig (p*q)). apply Totient_unique with (p*q); auto. apply Totient_mult; auto. destruct (Prime_Coprime_Divide q H); auto. apply Prime_Divide in H4; auto. destruct H4. contradict H; subst p; auto. contradiction. destruct (invMod ((p-1)*(q-1)) e) as [[d H5]|H5]. rewrite <- H4 in H3. rewrite <- H4 in H2. rewrite <-H4 in H5. refine (mkRSAKey d  H H0 H1 _ _ H3 H2 _); auto. intros C. apply mult_is_O in C. destruct C. subst p; contradict H; auto. subst q; contradict H0; auto. replace (d*e) with (e*d); auto. contradiction. Defined.

Definition RSAencrypt (k:RSAKey) (m:nat) : nat := modN (modkey_nz k) (pow m (pubkey k)).
Definition RSAdecrypt (k:RSAKey) (m:nat) : nat := modN (modkey_nz k) (pow m (seckey k)).
Theorem RSA_spec: forall k m, Coprime (modkey k) m -> RSAdecrypt k (RSAencrypt k m) = modN (modkey_nz k) m. Proof. intros k m Hc. unfold RSAdecrypt. unfold RSAencrypt. apply ModEq__modN_eq. apply ModEq_trans with (pow (pow m (pubkey k)) (seckey k)). apply ModEq_pow; auto. rewrite <- pow_mult. destruct k; simpl. simpl in Hc. destruct (ModEq_multN keyinv0) as [[q H]|[q H]]. destruct q. simpl in H. rewrite <- H. simpl. rewrite mult_1_r; auto. simpl in H.  absurd (totient modkey0<=1). apply lt_not_le. subst modkey0. replace (totient (prime3*prime4)) with ((prime3-1)*(prime4-1)). assert (2<=prime3); auto. apply le_lt_or_eq in H0. destruct H0. apply le_trans with (prime3-1); auto. destruct prime3. contradict isPrime3; auto. simpl. rewrite <- minus_n_O. auto. destruct prime4. contradict isPrime4; auto. destruct prime4. contradict isPrime4; auto. simpl. rewrite <- mult_n_Sm; auto. subst prime3. simpl. rewrite <- plus_n_O. assert (2<=prime4); auto. apply le_lt_or_eq in H0. destruct H0. destruct prime4. inversion H0. simpl. rewrite <- minus_n_O; auto. contradiction. apply Totient_unique with (prime3*prime4); auto. apply Totient_mult; auto. destruct (Prime_Coprime_Divide prime4 isPrime3); auto. destruct (Prime_Divide isPrime4 H0). contradict isPrime3; subst prime3; auto. contradiction. unfold totient. destruct (totient_sig (prime3*prime4)); auto.
  rewrite H. rewrite <- plus_assoc; auto. rewrite H. rewrite plus_comm. simpl. replace m with (m*1) at 3; auto. apply ModEq_mult; auto. rewrite pow_mult. replace 1 with (pow 1 q); auto. apply ModEq_pow. apply Euler; auto. unfold totient. destruct (totient_sig modkey0); auto. rewrite mult_1_r; auto. Qed.

